{"ast":null,"code":"var _jsxFileName = \"/Users/shuzhan/Documents/GitHub/renting_system/rent_front/src/Signup.js\";\nimport { Form, Input, Checkbox, Button, Modal, message } from 'antd';\nimport React, { useState, Component } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFinish = values => {\n      console.log(\"values\", values);\n      this.setState({\n        signupInfo: {\n          name: values.username,\n          password: values.password\n        }\n      }, () => {\n        console.log(this.state.signupInfo);\n        axios.post('/pillow/user-signup/', [this.state.signupinfo]).then(res => {\n          console.log(\"res\", res);\n\n          if (res.data.response.error === 'OK') {\n            message.info(\"You've signed up successfully!\");\n          } else {\n            message.error(\"This is an error message\");\n          }\n        });\n      });\n    };\n\n    this.state = {\n      signupInfo: {\n        name: '',\n        password: ''\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        name: \"basic\",\n        labelCol: {\n          span: 8\n        },\n        wrapperCol: {\n          span: 16\n        },\n        initialValues: {\n          remember: true\n        },\n        onFinish: this.onFinish // onFinishFailed={onFinishFailed}\n        ,\n        autoComplete: \"off\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Username\",\n          name: \"username\",\n          rules: [{\n            required: true,\n            message: 'Please input your username!'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Password\",\n          name: \"password\",\n          rules: [{\n            required: true,\n            message: 'Please input your password!'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"confirm\",\n          label: \"Confirm Password\",\n          dependencies: ['password'],\n          hasFeedback: true,\n          rules: [{\n            required: true,\n            message: 'Please confirm your password!'\n          }, _ref => {\n            let {\n              getFieldValue\n            } = _ref;\n            return {\n              validator(_, value) {\n                if (!value || getFieldValue('password') === value) {\n                  return Promise.resolve();\n                }\n\n                return Promise.reject(new Error('The two passwords that you entered do not match!'));\n              }\n\n            };\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          wrapperCol: {\n            offset: 8,\n            span: 16\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Sign up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), \");\"]\n    }, void 0, true);\n  }\n\n}\n\nexport default Signup;","map":{"version":3,"sources":["/Users/shuzhan/Documents/GitHub/renting_system/rent_front/src/Signup.js"],"names":["Form","Input","Checkbox","Button","Modal","message","React","useState","Component","axios","Signup","constructor","props","onFinish","values","console","log","setState","signupInfo","name","username","password","state","post","signupinfo","then","res","data","response","error","info","render","span","remember","required","getFieldValue","validator","_","value","Promise","resolve","reject","Error","offset"],"mappings":"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","sourcesContent":["import { Form, Input, Checkbox, Button, Modal, message } from 'antd';\nimport React, { useState, Component } from 'react';\nimport axios from 'axios';\n\nclass Signup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            signupInfo : {\n                name: '',\n                password: ''\n            }\n        }\n    }\n\n    onFinish = (values) => {\n        console.log(\"values\", values);\n        this.setState({signupInfo: {name: values.username, password: values.password}}, () => {\n            console.log(this.state.signupInfo);\n            axios.post('/pillow/user-signup/', [this.state.signupinfo]).then((res) => {\n                console.log(\"res\", res);\n                if (res.data.response.error === 'OK') {\n                    message.info(\"You've signed up successfully!\");\n                } else {\n                    message.error(\"This is an error message\");\n                }\n            });\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Form\n                    name=\"basic\"\n                    labelCol={{span: 8}}\n                    wrapperCol={{span: 16}}\n                    initialValues={{remember: true}}\n                    onFinish={this.onFinish}\n                    // onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Form.Item\n                        label=\"Username\"\n                        name=\"username\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your username!',\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Password\"\n                        name=\"password\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your password!',\n                            },\n                        ]}\n                    >\n                        <Input.Password />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"confirm\"\n                        label=\"Confirm Password\"\n                        dependencies={['password']}\n                        hasFeedback\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            ({ getFieldValue }) => ({\n                                validator(_, value) {\n                                    if (!value || getFieldValue('password') === value) {\n                                        return Promise.resolve();\n                                    }\n                                    return Promise.reject(new Error('The two passwords that you entered do not match!'));\n                                },\n                            }),\n                        ]}\n                    >\n                    <Input.Password />\n                    </Form.Item>\n                    <Form.Item\n                    wrapperCol={{\n                    offset: 8,\n                    span: 16,\n                }}\n                    >\n                    <Button type =\"primary\" htmlType=\"submit\">\n                    Sign up\n                    </Button>\n                    </Form.Item>\n                </Form>\n                );\n\n            </>\n        )\n    }\n}\n\nexport default Signup;"]},"metadata":{},"sourceType":"module"}